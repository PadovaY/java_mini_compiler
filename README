
=============================
=      File description     =
=============================

.
├── main
│   ├── Parser.java                             - A class represents a sjavac code file parser.
│   └── Sjavac.java                             - A class represents a sjavac code file validator(main class).
├── Scope
│   ├── ConditionalScope.java                   - A class represents a Conditional Scope.
│   ├── ConditionalStatements.java              - A class represents a Conditional Statements.
│   ├── DuplicatedVariableNameException.java    - A class represents a Duplicated Variable Name Exception.
│   ├── GlobalScope.java                        - A class represents a GlobalScope.
│   ├── IfCondition.java                        - A class represents a If Condition.
│   ├── IllegalAssignmentToFinalException.java  - A class represents a Illegal Assignment To Final Exception.
│   ├── IllegalLineException.java               - A class represents a IllegalLineException.
│   ├── IllegalMethodParameterException.java    - A class represents a Illegal Method Parameter Exception.
│   ├── Loop.java                               - A class represents a Loop.
│   ├── Method.java                             - A class represents a Method.
│   ├── MethodFactory.java                      - A class represents a Method Factory.
│   ├── MethodNotExistsException.java           - A class represents a Method Not Exists Exception.
│   ├── Scope.java                              - A class represents a Scope.
│   ├── UnclosedScopeException.java             - A class represents a Unclosed Scope Exception.
│   ├── VoidMethod.java                         - A class represents a Void Method.
│   └── WhileLoop.java                          - A class represents a While Loop.
└── Variable
    ├── BooleanVariable.java                    - A class represents a Boolean Variable.
    ├── CharVariable.java                       - A class represents a Char Variable.
    ├── DoubleVariable.java                     - A class represents a Double Variable.
    ├── IllegalVariableException.java           - A class represents a Illegal Variable Exception.
    ├── IncompatibleTypesException.java         - A class represents a Incompatible Types Exception.
    ├── IntVariable.java                        - A class represents a Int Variable.
    ├── StringVariable.java                     - A class represents a String Variable.
    ├── VariableFactory.java                    - A class represents a Variable Factory.
    └── Variable.java                           - A class represents a Variable.


=============================
=          Design           =
=============================


As described graphically in the UML, the design is based on a few design principles and patterns:

    modularity - by dividing the project to much small, independent components,
    it's assured the project will be as modular as possible.
    
    this was accomplished by dividing the code to three independent packages:
        1.  main - this package contains the necessary classes for going through (parse) a sjavac code
            file, where each case is handled differently, according to the sjavac language syntax.

        2.  Scope - this package contains all of the Scopes object: the global scope, a method scope,
            loop scope and conditional statements scopes, that helps us to validate the sjavac syntax.

        3. Variable - this package contains all of the variable's types classes we been asked to support,
           including int, double, char, boolean and string variables.

    By creating packages for scopes and variables, together with the factories and the abstraction,
    that will be discuss in a bit, it is very easy to create more and more scopes and variable types,
    or change an existing one - and this is what modularity is all about.

    Encapsulation - by signing sensitive data members as private, or packaged-accessed,
    in matter of effect,  an access prevention policy for our code was generated, so it may not
    be used for malicious purposes.

    Factories - by creating a Factory class for each of the modular packages - Scope's Method and Variable,
    it enables to create needed classes' instances much easier, and, of course, don't expose
    our independent classes' code to the public.

    Abstraction - by creating an interface for the scope and variable packages, and then divide the different
    classes to inherit from a common properties' abstract classes, the abstraction of the code was farther and farther
    increased, and therefore gain a much easier access to the otherwise complex
    program's operations, and create a more simple, modular program.


---------------------------------------------------------------------------------------------------
UML Changes:
---------------------------------------------------------------------------------------------------
A good programmer design his or her program before implementing it, but no design is perfect, so...
there are some changes in the design, mainly:

(*) Not implemented:
    - Variable Package have been fully implemented
    - main Package: the exceptions don't contribute so they were not implemnted
    - Scope package: didn't implemented: Comments, SingleComment, Or, And, ConditionsFactory,
      Modifier, Final classes and some of the exceptions didn't need.

     this is because there is a much useful way to deal with parsing. thanks to regex it is 
     easy to derive the statements wanted, and because there are only static codes and not
     flow it was more than enough.

     as uncle ben said: with great power, comes big responsibility.

(*) the scope is ordinary class because the variety of scope kinds is to large
    to use abstract. it caused inheritance problems between the classes.
